$FG,5$$WW,1$$TX+CX,"ZealOS Charter"$$FG$

* The vision is the same usage model and niche as the Commodore 64 -- a simple machine where programming was the goal, not just a means to an end.  However, it is modern, 64-bit and $FG,2$multi-cored$FG$.  It is special purpose, not general purpose, so some things it will not do.  Also, it's a kayak, not a Titanic. The priority is $FG,2$user developers$FG$, not $FG,2$3rd party developers$FG$.

* $FG,4$We don't think twice about breaking compatibility. $FG$ We do not put any hooks for future changes.  "Perfect" means we always act as though it is final, for all time.  Microsoft allowed the $FG,2$$TX,"Windows BMP",HTML="http://en.wikipedia.org/wiki/BMP_file"$$FG$ file format to adapt to the future and it became grotesque.

* Low line count and code complexity is the highest good, so it is easy to learn the whole thing.  Users should see the light at the end of the tunnel.  One file system, for example, is better than many file systems.

* There is a limit of 100,000 lines of code for all time, not including applications and demos. Currently, there are $TX,"97,194",D="DD_ZEALOS_LOC"$ lines of code.  $FG,4$3rd party libraries are banned$FG$ because they circumvent the intent of this limit.  The vision is a Commodore 64 ROM -- a fixed core API that is the only dependency of applications. Dependency on components and libraries creates a hell that is no longer blissful.

* The primary metric for resolving all ZealOS code governance issues is how fast the compiler compiles itself and the kernel with $LK,"BootHDIns",A="MN:BootHDIns"$(). The secondary metric is how understandable the code is. The $LK,"ZealC",A="FI:::/Doc/ZealC.DD"$ language should be changed to optimize these metrics, as Terry Davis did when he changed type casting from prefix standard C to postfix $LK,"ZealC",A="FI:::/Doc/ZealC.DD"$, but we need a rule to prevent degenerating into a brainfuck language.
 
* Minimal abstraction is a goal. Sheep are fools. They always respect a design that is more complicated than another.  Any genius can make it complicated.	Like in physics, it takes a supra-genius to make it simple.

* It is for one platform -- $FG,4$$TX,"x86_64",HTML="http://en.wikipedia.org/wiki/Amd64#AMD64"$$FG$ desktop PC compatibles, more like super-computers than battery efficient wimpy mobiles.

* One driver for each class of device. Limited exceptions are allowed. With divergent device capabilities, it is a nightmare for user applications and what is gained? 

* $FG,2$Ring-0-only$FG$.	Everything runs in kernel mode, including user applications.

* $FG,4$No wireless$FG$ communications. Only wired communications like Ethernet and Serial IO will be used.

* $FG,4$No GPU$FG$. We want one processing platform, the CPU, for everything.

* Full access to everything.	All memory, I/O ports, instructions, and similar things must never be off limits.  All functions, variables and class members will be accessible.  There are no C++ $FG,2$public$FG$/$FG,2$private$FG$ protections and all functions, even secondary ones in the kernel, can be called.

* $FG,2$Single-address-map$FG$ as though paging is not used.	Long mode requires paging, however, so the nearest thing is keeping all memory $FG,2$identity-mapped$FG$.

* $FG,2$Free$FG$ and $FG,2$public domain$FG$.

* $FG,2$100% open source$FG$ with all source included.

* Documents are not for printing. They're dynamic, intended for the screen.

* Just one 8x8 fixed-width font. $FG,4$No Unicode, just Extended ASCII$FG$. Other countries can make their own versions. The versions should be just for one language and platform.

* $FG,4$No multimedia$FG$. Sounds and images will be primarily calculated in real-time, not fetched from storage.

$FG,8$
* "Commodore 64" is a trademark owned by Polabe Holding NV.
* "Windows" is a trademark owned by MicroSoft Corp.
$FG$

$FG,5$$WW,1$$TX+CX,"Possible Amendments"$$FG$

The compiler's parser makes RISC code which it optimizes to CISC.  Terry Davis discovered this does not matter because the CPU converts it back to RISC and schedules it, internally.  A ZealOS zealot with more zeal might say we should save lines-of-code by removing the CISC optimizing.
